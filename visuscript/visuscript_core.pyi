from typing import Iterable, Union

class Vec2:
    def __init__(self, x: float, y: float): ...
    def __add__(self, other: "Vec2") -> "Vec2": ...
    def __sub__(self, other: "Vec2") -> "Vec2": ...
    def __mul__(self, other: "Vec2") -> "Vec2": ...
    def __truediv__(self, other: "Vec2") -> "Vec2": ...
    def __pow__(self, other: "Vec2") -> "Vec2": ...
    def __neg__(self) -> "Vec2": ...
    def __eq__(self, other: "Vec2") -> bool: ...  # type: ignore
    def __iter__(self) -> Iterable[float]: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...

class Rgb:
    def __init__(self, r: int, g: int, b: int): ...
    def __add__(self, other: "Rgb") -> "Rgb": ...
    def __sub__(self, other: "Rgb") -> "Rgb": ...
    def __mul__(self, other: "Rgb") -> "Rgb": ...
    def __truediv__(self, other: "Rgb") -> "Rgb": ...
    def __eq__(self, other: "Rgb"): ...  # type: ignore
    def __iter__(self) -> Iterable[int]: ...
    @property
    def r(self) -> int: ...
    @property
    def g(self) -> int: ...
    @property
    def b(self) -> int: ...

class Transform:
    def __init__(self, translation: Vec2, scale: Vec2, rotation: float): ...
    @property
    def translation(self) -> Vec2: ...
    @property
    def scale(self) -> Vec2: ...
    @property
    def rotation(self) -> float: ...
    def __matmul__(
        self, other: Union["Transform", Vec2]
    ) -> Union["Transform", Vec2]: ...
