from typing import Iterable, Union, overload, TypeAlias, Sequence


Vec2Like: TypeAlias = Union[Sequence[float], Vec2]



class Vec2:
    def __init__(self, x: float, y: float): ...
    def __add__(self, other: Vec2Like) -> "Vec2": ...
    def __sub__(self, other: Vec2Like) -> "Vec2": ...
    def __mul__(self, other: Vec2Like) -> "Vec2": ...
    def __truediv__(self, other: Vec2Like) -> "Vec2": ...
    def __pow__(self, other: Vec2Like) -> "Vec2": ...
    def __neg__(self) -> "Vec2": ...
    def __eq__(self, other: Vec2Like) -> bool: ...  # type: ignore
    def __iter__(self) -> Iterable[float]: ...
    @property
    def x(self) -> float: ...
    @property
    def y(self) -> float: ...
    
    def magnitude(self) -> float: ...

class Rgb:
    def __init__(self, r: int, g: int, b: int): ...
    def __add__(self, other: "Rgb") -> "Rgb": ...
    def __sub__(self, other: "Rgb") -> "Rgb": ...
    def __mul__(self, other: "Rgb") -> "Rgb": ...
    def __truediv__(self, other: "Rgb") -> "Rgb": ...
    def __eq__(self, other: "Rgb"): ...  # type: ignore
    def __iter__(self) -> Iterable[int]: ...
    @property
    def r(self) -> int: ...
    @property
    def g(self) -> int: ...
    @property
    def b(self) -> int: ...

class Transform:
    def __init__(self, translation: Vec2Like, scale: Vec2Like, rotation: float): ...
    @property
    def translation(self) -> Vec2: ...
    @property
    def scale(self) -> Vec2: ...
    @property
    def rotation(self) -> float: ...

    def inverse(self) -> "Transform": ...

    @overload
    def __matmul__(self, other: "Transform") -> "Transform": ...
    @overload
    def __matmul__(self, other: Vec2Like) -> Vec2: ...
    def __matmul__(
        self, other: Union["Transform", Vec2Like]
    ) -> Union["Transform", Vec2]: ...

class Drawable:
    def __init__(
            self,
            element_text: str = ...,
            transform: Transform = ...,
            stroke: Rgb = ...,
            stroke_opacity: float = ...,
            fill: Rgb = ...,
            fill_opacity: float = ...,
            opacity: float = ...): ...
    

    @property
    def _transform(self) -> Transform: ...

    @_transform.setter
    def _transform(self, value: "Transform") -> None: ...

    @property
    def _element_text(self) -> str: ...

    @_element_text.setter
    def _element_text(self, value: str) -> None: ...

    @property
    def _stroke(self) -> Rgb: ...

    @_stroke.setter
    def _stroke(self, value: Rgb) -> None: ...

    @property
    def _stroke_opacity(self) -> float: ...

    @_stroke_opacity.setter
    def _stroke_opacity(self, value: float) -> None: ...

    @property
    def _fill(self) -> Rgb: ...

    @_fill.setter
    def _fill(self, value: Rgb) -> None: ...

    @property
    def _fill_opacity(self) -> float: ...

    @_fill_opacity.setter
    def _fill_opacity(self, value: float) -> None: ...

    @property
    def _opacity(self) -> float: ...

    @_opacity.setter
    def _opacity(self, value: float) -> None: ...
    
